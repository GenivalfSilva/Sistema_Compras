#!/usr/bin/env python3
"""
Script para migrar dados do JSON para o banco de dados SQLite/PostgreSQL
"""

import os
import sys
import json
from database import get_database

def migrate_json_to_database(json_file="compras_sla_data.json"):
    """Migra dados do arquivo JSON para o banco de dados"""
    
    print(f"üîÑ Iniciando migra√ß√£o de {json_file}...")
    
    if not os.path.exists(json_file):
        print(f"‚ùå Arquivo {json_file} n√£o encontrado!")
        return False
    
    try:
        # Carrega dados do JSON
        with open(json_file, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        print(f"üìÇ Dados carregados: {len(data.get('usuarios', []))} usu√°rios, {len(data.get('solicitacoes', []))} solicita√ß√µes")
        
        # Inicializa banco de dados
        db = get_database(use_cloud_db=False)  # Usar SQLite local para migra√ß√£o
        
        # Migra usu√°rios
        usuarios_migrados = 0
        for user in data.get('usuarios', []):
            try:
                success = db.add_user(
                    username=user['username'],
                    nome=user['nome'],
                    perfil=user['perfil'],
                    departamento=user['departamento'],
                    senha_hash=user['senha_hash'],
                    is_hashed=True  # Senha j√° est√° hasheada
                )
                if success:
                    usuarios_migrados += 1
                    print(f"‚úÖ Usu√°rio migrado: {user['username']} ({user['perfil']})")
                else:
                    print(f"‚ö†Ô∏è Usu√°rio j√° existe: {user['username']}")
            except Exception as e:
                print(f"‚ùå Erro ao migrar usu√°rio {user['username']}: {e}")
        
        # Migra configura√ß√µes
        config_migradas = 0
        configuracoes = data.get('configuracoes', {})
        for key, value in configuracoes.items():
            try:
                # Converte para string JSON se for dict/list
                if isinstance(value, (dict, list)):
                    value_str = json.dumps(value)
                else:
                    value_str = str(value)
                
                db.set_config(key, value_str)
                config_migradas += 1
                print(f"‚úÖ Configura√ß√£o migrada: {key}")
            except Exception as e:
                print(f"‚ùå Erro ao migrar configura√ß√£o {key}: {e}")
        
        # TODO: Migrar solicita√ß√µes (implementar quando necess√°rio)
        # Por enquanto, manter no JSON para compatibilidade
        
        print(f"\nüéâ Migra√ß√£o conclu√≠da!")
        print(f"üìä Resumo:")
        print(f"   - Usu√°rios migrados: {usuarios_migrados}")
        print(f"   - Configura√ß√µes migradas: {config_migradas}")
        print(f"   - Solicita√ß√µes: mantidas no JSON (compatibilidade)")
        
        # Cria backup do JSON original
        backup_file = f"{json_file}.backup"
        if not os.path.exists(backup_file):
            import shutil
            shutil.copy2(json_file, backup_file)
            print(f"üíæ Backup criado: {backup_file}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro durante migra√ß√£o: {e}")
        return False
    finally:
        if 'db' in locals():
            db.close()

def test_database():
    """Testa a conex√£o e estrutura do banco"""
    print("üîç Testando banco de dados...")
    
    try:
        db = get_database(use_cloud_db=False)
        
        # Testa usu√°rios
        users = db.get_all_users()
        print(f"üë• Usu√°rios no banco: {len(users)}")
        for user in users:
            print(f"   - {user['username']} ({user['perfil']})")
        
        # Testa autentica√ß√£o
        if users:
            test_user = users[0]
            print(f"üîê Testando autentica√ß√£o com usu√°rio: {test_user['username']}")
            # Nota: n√£o podemos testar senha pois est√° hasheada
        
        print("‚úÖ Banco de dados funcionando corretamente!")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao testar banco: {e}")
        return False
    finally:
        if 'db' in locals():
            db.close()

def main():
    """Fun√ß√£o principal"""
    print("üöÄ Sistema de Migra√ß√£o - JSON para Banco de Dados")
    print("=" * 50)
    
    if len(sys.argv) > 1:
        if sys.argv[1] == "test":
            test_database()
            return
        elif sys.argv[1] == "migrate":
            json_file = sys.argv[2] if len(sys.argv) > 2 else "compras_sla_data.json"
            migrate_json_to_database(json_file)
            return
    
    # Menu interativo
    while True:
        print("\nOp√ß√µes:")
        print("1. Migrar dados do JSON")
        print("2. Testar banco de dados")
        print("3. Sair")
        
        choice = input("\nEscolha uma op√ß√£o (1-3): ").strip()
        
        if choice == "1":
            json_file = input("Arquivo JSON (padr√£o: compras_sla_data.json): ").strip()
            if not json_file:
                json_file = "compras_sla_data.json"
            migrate_json_to_database(json_file)
        
        elif choice == "2":
            test_database()
        
        elif choice == "3":
            print("üëã Saindo...")
            break
        
        else:
            print("‚ùå Op√ß√£o inv√°lida!")

if __name__ == "__main__":
    main()
