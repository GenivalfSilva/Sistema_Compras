#!/usr/bin/env python3
"""
Script para adicionar colunas necess√°rias para os dados da requisi√ß√£o no Sistema de Compras
Executa migra√ß√£o segura do banco PostgreSQL local
"""

import psycopg2
from psycopg2.extras import RealDictCursor
import os
import toml

def get_database_connection():
    """Obt√©m conex√£o com o banco PostgreSQL local"""
    try:
        # Tenta carregar configura√ß√£o do arquivo secrets_local.toml
        config_path = 'secrets_local.toml'
        if os.path.exists(config_path):
            config = toml.load(config_path)
            if 'postgres' in config:
                pg = config['postgres']
                conn = psycopg2.connect(
                    host=pg["host"],
                    database=pg["database"],
                    user=pg["username"],
                    password=pg["password"],
                    port=int(pg.get("port", 5432)),
                    cursor_factory=RealDictCursor,
                )
            elif 'database' in config and 'url' in config['database']:
                conn = psycopg2.connect(config['database']['url'], cursor_factory=RealDictCursor)
        else:
            # Fallback para vari√°veis de ambiente
            db_url = os.getenv('DATABASE_URL', 'postgresql://postgres:postgres123@localhost:5432/sistema_compras')
            conn = psycopg2.connect(db_url, cursor_factory=RealDictCursor)
        
        return conn
    except Exception as e:
        print(f"‚ùå Erro ao conectar com o banco: {e}")
        return None

def check_column_exists(cursor, table_name, column_name):
    """Verifica se uma coluna existe na tabela"""
    cursor.execute("""
        SELECT column_name 
        FROM information_schema.columns 
        WHERE table_name = %s AND column_name = %s
    """, (table_name, column_name))
    return cursor.fetchone() is not None

def add_requisition_columns():
    """Adiciona colunas necess√°rias para dados da requisi√ß√£o"""
    conn = get_database_connection()
    if not conn:
        return False
    
    try:
        cursor = conn.cursor()
        
        # Lista de colunas para dados da requisi√ß√£o que podem estar faltando
        requisition_columns = [
            ("numero_requisicao_interno", "TEXT", "N√∫mero da requisi√ß√£o no sistema interno"),
            ("data_requisicao_interna", "TEXT", "Data de cria√ß√£o da requisi√ß√£o interna"),
            ("responsavel_estoque", "TEXT", "Respons√°vel do estoque que criou a requisi√ß√£o"),
            ("observacoes_requisicao", "TEXT", "Observa√ß√µes sobre a requisi√ß√£o"),
            ("data_requisicao", "TEXT", "Data da requisi√ß√£o (formato leg√≠vel)"),
            ("numero_requisicao", "INTEGER", "N√∫mero sequencial da requisi√ß√£o"),
        ]
        
        print("üîç Verificando colunas existentes na tabela 'solicitacoes'...")
        
        # Verifica quais colunas j√° existem
        existing_columns = []
        missing_columns = []
        
        for column_name, column_type, description in requisition_columns:
            if check_column_exists(cursor, 'solicitacoes', column_name):
                existing_columns.append(column_name)
                print(f"‚úÖ Coluna '{column_name}' j√° existe")
            else:
                missing_columns.append((column_name, column_type, description))
                print(f"‚ùå Coluna '{column_name}' n√£o encontrada")
        
        # Adiciona colunas faltantes
        if missing_columns:
            print(f"\nüìù Adicionando {len(missing_columns)} coluna(s) faltante(s)...")
            
            for column_name, column_type, description in missing_columns:
                try:
                    alter_sql = f"ALTER TABLE solicitacoes ADD COLUMN {column_name} {column_type}"
                    cursor.execute(alter_sql)
                    print(f"‚úÖ Coluna '{column_name}' adicionada com sucesso ({description})")
                except Exception as e:
                    print(f"‚ùå Erro ao adicionar coluna '{column_name}': {e}")
            
            # Commit das altera√ß√µes
            conn.commit()
            print(f"\n‚úÖ Migra√ß√£o conclu√≠da! {len(missing_columns)} coluna(s) adicionada(s)")
        else:
            print("\n‚úÖ Todas as colunas necess√°rias j√° existem no banco!")
        
        # Verifica estrutura final da tabela
        print("\nüìã Estrutura atual da tabela 'solicitacoes':")
        cursor.execute("""
            SELECT column_name, data_type, is_nullable
            FROM information_schema.columns 
            WHERE table_name = 'solicitacoes'
            ORDER BY ordinal_position
        """)
        
        columns = cursor.fetchall()
        for col in columns:
            nullable = "NULL" if col['is_nullable'] == 'YES' else "NOT NULL"
            print(f"  ‚Ä¢ {col['column_name']} ({col['data_type']}) - {nullable}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro durante a migra√ß√£o: {e}")
        conn.rollback()
        return False
    finally:
        if conn:
            conn.close()

def main():
    """Fun√ß√£o principal"""
    print("üöÄ Iniciando migra√ß√£o para adicionar colunas de requisi√ß√£o...")
    print("=" * 60)
    
    success = add_requisition_columns()
    
    print("=" * 60)
    if success:
        print("‚úÖ Migra√ß√£o conclu√≠da com sucesso!")
        print("\nüìå Pr√≥ximos passos:")
        print("1. Reiniciar a aplica√ß√£o Streamlit")
        print("2. Testar o formul√°rio de requisi√ß√µes")
        print("3. Verificar se os dados s√£o salvos corretamente")
    else:
        print("‚ùå Migra√ß√£o falhou. Verifique os logs acima.")
    
    return success

if __name__ == "__main__":
    main()
