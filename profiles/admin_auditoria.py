"""
Interface de Auditoria para Admin
Visualiza√ß√£o de logs de a√ß√µes administrativas
"""

import streamlit as st
import pandas as pd
from database_local import get_local_database
from datetime import datetime, timedelta
import json

def show_admin_auditoria():
    """Interface para visualizar logs de auditoria do Admin"""
    
    st.title("üîç Auditoria de A√ß√µes Administrativas")
    
    # Aviso sobre auditoria
    st.info("üìã **Registro de Auditoria** - Todas as a√ß√µes administrativas s√£o registradas automaticamente para controle e rastreabilidade.")
    
    db = get_local_database()
    
    # Filtros
    col1, col2, col3 = st.columns(3)
    
    with col1:
        limite_registros = st.selectbox(
            "üìä Registros por p√°gina:",
            [25, 50, 100, 200],
            index=1
        )
    
    with col2:
        filtro_modulo = st.selectbox(
            "üè∑Ô∏è Filtrar por m√≥dulo:",
            ["Todos", "SOLICITACOES", "REQUISICOES", "SUPRIMENTOS", "APROVACOES", "USUARIOS", "CONFIGURACOES"],
            index=0
        )
    
    with col3:
        filtro_periodo = st.selectbox(
            "üìÖ Per√≠odo:",
            ["√öltimas 24h", "√öltima semana", "√öltimo m√™s", "Todos"],
            index=0
        )
    
    # Buscar logs
    try:
        logs = db.get_admin_audit_logs(limit=limite_registros)
        
        if not logs:
            st.warning("üìù Nenhum log de auditoria encontrado.")
            return
        
        # Converter para DataFrame
        df_logs = pd.DataFrame(logs)
        
        # Aplicar filtros
        if filtro_modulo != "Todos":
            df_logs = df_logs[df_logs['modulo'] == filtro_modulo]
        
        # Filtro de per√≠odo
        if filtro_periodo != "Todos":
            now = datetime.now()
            if filtro_periodo == "√öltimas 24h":
                cutoff = now - timedelta(days=1)
            elif filtro_periodo == "√öltima semana":
                cutoff = now - timedelta(weeks=1)
            elif filtro_periodo == "√öltimo m√™s":
                cutoff = now - timedelta(days=30)
            
            df_logs = df_logs[pd.to_datetime(df_logs['timestamp']) >= cutoff]
        
        if df_logs.empty:
            st.warning("üìù Nenhum log encontrado com os filtros aplicados.")
            return
        
        # Estat√≠sticas
        st.subheader("üìä Estat√≠sticas")
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric("Total de A√ß√µes", len(df_logs))
        
        with col2:
            a√ß√µes_hoje = len(df_logs[pd.to_datetime(df_logs['timestamp']).dt.date == datetime.now().date()])
            st.metric("A√ß√µes Hoje", a√ß√µes_hoje)
        
        with col3:
            m√≥dulos_√∫nicos = df_logs['modulo'].nunique()
            st.metric("M√≥dulos Acessados", m√≥dulos_√∫nicos)
        
        with col4:
            if 'solicitacao_id' in df_logs.columns:
                solicita√ß√µes_afetadas = df_logs['solicitacao_id'].dropna().nunique()
                st.metric("Solicita√ß√µes Afetadas", solicita√ß√µes_afetadas)
        
        # Gr√°fico de a√ß√µes por m√≥dulo
        st.subheader("üìà A√ß√µes por M√≥dulo")
        a√ß√µes_por_modulo = df_logs['modulo'].value_counts()
        st.bar_chart(a√ß√µes_por_modulo)
        
        # Tabela de logs
        st.subheader("üìã Registro Detalhado")
        
        # Preparar dados para exibi√ß√£o
        df_display = df_logs.copy()
        df_display['timestamp'] = pd.to_datetime(df_display['timestamp']).dt.strftime('%d/%m/%Y %H:%M:%S')
        
        # Expandir detalhes JSON
        def format_detalhes(detalhes_json):
            if pd.isna(detalhes_json) or detalhes_json is None:
                return "-"
            try:
                detalhes = json.loads(detalhes_json)
                return ", ".join([f"{k}: {v}" for k, v in detalhes.items()])
            except:
                return str(detalhes_json)
        
        if 'detalhes' in df_display.columns:
            df_display['detalhes_formatados'] = df_display['detalhes'].apply(format_detalhes)
        
        # Selecionar colunas para exibi√ß√£o
        colunas_exibir = ['timestamp', 'usuario', 'acao', 'modulo']
        if 'solicitacao_id' in df_display.columns:
            colunas_exibir.append('solicitacao_id')
        if 'detalhes_formatados' in df_display.columns:
            colunas_exibir.append('detalhes_formatados')
        if 'ip_address' in df_display.columns:
            colunas_exibir.append('ip_address')
        
        # Renomear colunas para portugu√™s
        df_display_renamed = df_display[colunas_exibir].rename(columns={
            'timestamp': 'Data/Hora',
            'usuario': 'Usu√°rio',
            'acao': 'A√ß√£o',
            'modulo': 'M√≥dulo',
            'solicitacao_id': 'ID Solicita√ß√£o',
            'detalhes_formatados': 'Detalhes',
            'ip_address': 'IP'
        })
        
        # Mostrar tabela
        st.dataframe(
            df_display_renamed,
            use_container_width=True,
            hide_index=True
        )
        
        # Bot√£o de exporta√ß√£o
        if st.button("üì• Exportar Logs"):
            csv_data = df_display_renamed.to_csv(index=False, encoding='utf-8-sig', sep=';')
            st.download_button(
                label="üíæ Download CSV",
                data=csv_data,
                file_name=f"auditoria_admin_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                mime="text/csv"
            )
        
        # Detalhes expandidos
        st.subheader("üîç Detalhes da √öltima A√ß√£o")
        if not df_logs.empty:
            ultima_acao = df_logs.iloc[0]
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.write(f"**Usu√°rio:** {ultima_acao['usuario']}")
                st.write(f"**A√ß√£o:** {ultima_acao['acao']}")
                st.write(f"**M√≥dulo:** {ultima_acao['modulo']}")
            
            with col2:
                st.write(f"**Data/Hora:** {ultima_acao['timestamp']}")
                if ultima_acao.get('solicitacao_id'):
                    st.write(f"**ID Solicita√ß√£o:** {ultima_acao['solicitacao_id']}")
                if ultima_acao.get('ip_address'):
                    st.write(f"**IP:** {ultima_acao['ip_address']}")
            
            if ultima_acao.get('detalhes'):
                st.write("**Detalhes:**")
                try:
                    detalhes = json.loads(ultima_acao['detalhes'])
                    st.json(detalhes)
                except:
                    st.write(ultima_acao['detalhes'])
    
    except Exception as e:
        st.error(f"‚ùå Erro ao carregar logs de auditoria: {e}")

if __name__ == "__main__":
    show_admin_auditoria()
