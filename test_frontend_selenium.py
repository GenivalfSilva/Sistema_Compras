#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Testes de Frontend com Selenium - Sistema de Compras
Testa intera√ß√µes reais do usu√°rio na interface web
"""

import os
import sys
import time
import json
import subprocess
from datetime import datetime
from typing import Dict, List
import threading

# Importa√ß√µes condicionais para Selenium
try:
    from selenium import webdriver
    from selenium.webdriver.common.by import By
    from selenium.webdriver.support.ui import WebDriverWait
    from selenium.webdriver.support import expected_conditions as EC
    from selenium.webdriver.chrome.options import Options
    from selenium.common.exceptions import TimeoutException, NoSuchElementException
    SELENIUM_DISPONIVEL = True
except ImportError:
    SELENIUM_DISPONIVEL = False

class TestadorFrontendSelenium:
    """Classe para testar intera√ß√µes reais na interface web"""
    
    def __init__(self):
        self.resultados = []
        self.contador_testes = 0
        self.contador_sucessos = 0
        self.contador_falhas = 0
        self.driver = None
        self.servidor_processo = None
        self.base_url = "http://localhost:8501"
        
    def log_resultado(self, teste: str, status: str, detalhes: str = ""):
        """Registra resultado de um teste"""
        resultado = {
            "teste": teste,
            "status": status,
            "detalhes": detalhes,
            "timestamp": datetime.now().isoformat()
        }
        self.resultados.append(resultado)
        
        if status == "SUCESSO":
            self.contador_sucessos += 1
            print(f"‚úÖ {teste}")
        elif status == "FALHA":
            self.contador_falhas += 1
            print(f"‚ùå {teste} - {detalhes}")
        else:
            print(f"‚ö†Ô∏è  {teste} - {detalhes}")
            
        self.contador_testes += 1

    def iniciar_servidor_streamlit(self):
        """Inicia o servidor Streamlit para testes"""
        try:
            print("üöÄ Iniciando servidor Streamlit...")
            
            # Para processos existentes
            try:
                subprocess.run(["taskkill", "/F", "/IM", "streamlit.exe"], 
                             capture_output=True, check=False)
                time.sleep(2)
            except:
                pass
            
            # Inicia servidor
            self.servidor_processo = subprocess.Popen([
                sys.executable, "-m", "streamlit", "run", "app.py",
                "--server.port", "8501",
                "--server.headless", "true"
            ], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            
            # Aguarda inicializa√ß√£o
            print("‚è≥ Aguardando servidor...")
            time.sleep(10)  # Streamlit precisa de mais tempo
            return True
            
        except Exception as e:
            print(f"‚ùå Erro ao iniciar servidor: {e}")
            return False

    def iniciar_webdriver(self):
        """Inicia o WebDriver do Chrome"""
        if not SELENIUM_DISPONIVEL:
            print("‚ùå Selenium n√£o est√° instalado. Execute: pip install selenium")
            return False
            
        try:
            chrome_options = Options()
            chrome_options.add_argument("--headless")  # Executa sem interface gr√°fica
            chrome_options.add_argument("--no-sandbox")
            chrome_options.add_argument("--disable-dev-shm-usage")
            chrome_options.add_argument("--disable-gpu")
            chrome_options.add_argument("--window-size=1920,1080")
            
            self.driver = webdriver.Chrome(options=chrome_options)
            self.driver.implicitly_wait(10)
            
            print("‚úÖ WebDriver Chrome iniciado")
            return True
            
        except Exception as e:
            print(f"‚ùå Erro ao iniciar WebDriver: {e}")
            print("üí° Certifique-se de ter o ChromeDriver instalado")
            return False

    def testar_carregamento_pagina(self):
        """Testa carregamento da p√°gina principal"""
        print("\nüåê TESTANDO CARREGAMENTO COM SELENIUM")
        print("=" * 50)
        
        try:
            self.driver.get(self.base_url)
            
            # Aguarda elemento aparecer
            WebDriverWait(self.driver, 20).until(
                EC.presence_of_element_located((By.TAG_NAME, "body"))
            )
            
            titulo = self.driver.title
            if "streamlit" in titulo.lower() or len(titulo) > 0:
                self.log_resultado("Carregamento da p√°gina", "SUCESSO")
            else:
                self.log_resultado("Carregamento da p√°gina", "FALHA", f"T√≠tulo: {titulo}")
                
        except TimeoutException:
            self.log_resultado("Carregamento da p√°gina", "FALHA", "Timeout ao carregar")
        except Exception as e:
            self.log_resultado("Carregamento da p√°gina", "FALHA", str(e))

    def testar_elementos_login(self):
        """Testa elementos da tela de login"""
        print("\nüîê TESTANDO ELEMENTOS DE LOGIN")
        print("=" * 50)
        
        try:
            # Aguarda carregamento completo do Streamlit
            time.sleep(5)
            
            # M√∫ltiplas estrat√©gias para encontrar campos de input
            inputs_encontrados = 0
            
            # Estrat√©gia 1: Inputs padr√£o
            inputs = self.driver.find_elements(By.TAG_NAME, "input")
            inputs_encontrados += len(inputs)
            
            # Estrat√©gia 2: Inputs do Streamlit (text_input)
            streamlit_inputs = self.driver.find_elements(By.CSS_SELECTOR, "[data-testid='stTextInput'] input")
            inputs_encontrados += len(streamlit_inputs)
            
            # Estrat√©gia 3: Inputs por classe CSS do Streamlit
            css_inputs = self.driver.find_elements(By.CSS_SELECTOR, ".stTextInput input")
            inputs_encontrados += len(css_inputs)
            
            # Estrat√©gia 4: Qualquer elemento de input vis√≠vel
            all_inputs = self.driver.find_elements(By.CSS_SELECTOR, "input[type='text'], input[type='password'], input:not([type])")
            inputs_encontrados += len(all_inputs)
            
            if inputs_encontrados >= 2:
                self.log_resultado("Campos de login presentes", "SUCESSO", f"{inputs_encontrados} campos encontrados")
            else:
                self.log_resultado("Campos de login presentes", "FALHA", 
                                 f"Apenas {inputs_encontrados} campos encontrados")
            
            # Procura por bot√µes com m√∫ltiplas estrat√©gias
            botoes_encontrados = 0
            
            # Bot√µes padr√£o
            botoes = self.driver.find_elements(By.TAG_NAME, "button")
            botoes_encontrados += len(botoes)
            
            # Bot√µes do Streamlit
            streamlit_buttons = self.driver.find_elements(By.CSS_SELECTOR, "[data-testid='stButton'] button")
            botoes_encontrados += len(streamlit_buttons)
            
            if botoes_encontrados >= 1:
                self.log_resultado("Bot√µes presentes", "SUCESSO", f"{botoes_encontrados} bot√µes encontrados")
            else:
                self.log_resultado("Bot√µes presentes", "FALHA", "Nenhum bot√£o encontrado")
                
        except Exception as e:
            self.log_resultado("Elementos de login", "FALHA", str(e))

    def testar_interacao_login(self):
        """Testa intera√ß√£o com formul√°rio de login"""
        print("\nüë§ TESTANDO INTERA√á√ÉO DE LOGIN")
        print("=" * 50)
        
        try:
            # Aguarda carregamento completo
            time.sleep(5)
            
            # Procura campos com m√∫ltiplas estrat√©gias
            inputs_usuario = None
            inputs_senha = None
            
            # Estrat√©gia 1: Inputs padr√£o
            inputs = self.driver.find_elements(By.TAG_NAME, "input")
            
            # Estrat√©gia 2: Inputs do Streamlit
            streamlit_inputs = self.driver.find_elements(By.CSS_SELECTOR, "[data-testid='stTextInput'] input")
            
            # Estrat√©gia 3: Todos os inputs vis√≠veis
            all_inputs = self.driver.find_elements(By.CSS_SELECTOR, "input")
            
            # Combina todas as estrat√©gias
            todos_inputs = list(set(inputs + streamlit_inputs + all_inputs))
            
            if len(todos_inputs) >= 2:
                # Tenta identificar campos por posi√ß√£o ou atributos
                for i, input_elem in enumerate(todos_inputs[:2]):
                    try:
                        if i == 0:  # Primeiro campo - usu√°rio
                            input_elem.clear()
                            input_elem.send_keys("admin")
                            inputs_usuario = input_elem
                        elif i == 1:  # Segundo campo - senha
                            input_elem.clear()
                            input_elem.send_keys("admin123")
                            inputs_senha = input_elem
                    except:
                        continue
                
                if inputs_usuario is not None and inputs_senha is not None:
                    self.log_resultado("Preenchimento de campos", "SUCESSO")
                else:
                    self.log_resultado("Preenchimento de campos", "FALHA", "N√£o foi poss√≠vel preencher os campos")
                
                # Procura bot√£o de login com m√∫ltiplas estrat√©gias
                botao_clicado = False
                
                # Estrat√©gia 1: Bot√µes padr√£o
                botoes = self.driver.find_elements(By.TAG_NAME, "button")
                
                # Estrat√©gia 2: Bot√µes do Streamlit
                streamlit_buttons = self.driver.find_elements(By.CSS_SELECTOR, "[data-testid='stButton'] button")
                
                todos_botoes = list(set(botoes + streamlit_buttons))
                
                for botao in todos_botoes:
                    try:
                        texto_botao = botao.text.lower()
                        if any(palavra in texto_botao for palavra in ["login", "entrar", "acessar", "conectar"]):
                            botao.click()
                            self.log_resultado("Clique no bot√£o de login", "SUCESSO")
                            botao_clicado = True
                            time.sleep(5)  # Aguarda processamento
                            break
                    except:
                        continue
                
                if not botao_clicado and todos_botoes:
                    # Clica no primeiro bot√£o dispon√≠vel
                    try:
                        todos_botoes[0].click()
                        self.log_resultado("Clique em bot√£o", "SUCESSO")
                        time.sleep(5)
                    except:
                        self.log_resultado("Clique em bot√£o", "FALHA", "N√£o foi poss√≠vel clicar")
                
            else:
                self.log_resultado("Intera√ß√£o de login", "FALHA", f"Apenas {len(todos_inputs)} campos encontrados")
                
        except Exception as e:
            self.log_resultado("Intera√ß√£o de login", "FALHA", str(e))

    def testar_navegacao_pos_login(self):
        """Testa navega√ß√£o ap√≥s login"""
        print("\nüß≠ TESTANDO NAVEGA√á√ÉO P√ìS-LOGIN")
        print("=" * 50)
        
        try:
            # Aguarda carregamento ap√≥s login
            time.sleep(5)
            
            elementos_nav = []
            
            # Estrat√©gia 1: Sidebar do Streamlit
            sidebar_selectors = [
                "[data-testid='stSidebar']",
                ".css-1d391kg",
                ".stSidebar",
                "[class*='sidebar']",
                "[class*='Sidebar']"
            ]
            
            for selector in sidebar_selectors:
                try:
                    sidebar = self.driver.find_element(By.CSS_SELECTOR, selector)
                    if sidebar.is_displayed():
                        elementos_nav.append("sidebar")
                        break
                except:
                    continue
            
            # Estrat√©gia 2: Selectbox do Streamlit
            selectbox_selectors = [
                "[data-testid='stSelectbox'] select",
                ".stSelectbox select",
                "select",
                "[data-testid='stSelectbox']"
            ]
            
            for selector in selectbox_selectors:
                try:
                    selectboxes = self.driver.find_elements(By.CSS_SELECTOR, selector)
                    if selectboxes:
                        elementos_nav.append("selectbox")
                        break
                except:
                    continue
            
            # Estrat√©gia 3: Bot√µes de navega√ß√£o
            try:
                botoes = self.driver.find_elements(By.TAG_NAME, "button")
                streamlit_buttons = self.driver.find_elements(By.CSS_SELECTOR, "[data-testid='stButton'] button")
                todos_botoes = list(set(botoes + streamlit_buttons))
                
                if len(todos_botoes) > 1:
                    elementos_nav.append(f"bot√µes ({len(todos_botoes)})")
            except:
                pass
            
            # Estrat√©gia 4: Tabs do Streamlit
            try:
                tabs = self.driver.find_elements(By.CSS_SELECTOR, "[data-testid='stTabs'] button")
                if tabs:
                    elementos_nav.append(f"tabs ({len(tabs)})")
            except:
                pass
            
            # Estrat√©gia 5: Elementos com texto indicativo de navega√ß√£o
            try:
                nav_texts = ["dashboard", "solicita√ß√£o", "admin", "perfil", "menu"]
                for text in nav_texts:
                    elements = self.driver.find_elements(By.XPATH, f"//*[contains(text(), '{text}')]") 
                    if elements:
                        elementos_nav.append(f"texto-{text}")
                        break
            except:
                pass
            
            if elementos_nav:
                self.log_resultado("Elementos de navega√ß√£o", "SUCESSO", 
                                 f"Encontrados: {', '.join(elementos_nav)}")
            else:
                # Verifica se pelo menos a p√°gina mudou ap√≥s login
                try:
                    page_source = self.driver.page_source.lower()
                    if any(word in page_source for word in ["dashboard", "bem-vindo", "logout", "sair", "perfil"]):
                        self.log_resultado("Navega√ß√£o p√≥s-login", "SUCESSO", "P√°gina alterada ap√≥s login")
                    else:
                        self.log_resultado("Elementos de navega√ß√£o", "FALHA", 
                                         "Nenhum elemento de navega√ß√£o encontrado")
                except:
                    self.log_resultado("Elementos de navega√ß√£o", "FALHA", 
                                     "Nenhum elemento de navega√ß√£o encontrado")
                
        except Exception as e:
            self.log_resultado("Navega√ß√£o p√≥s-login", "FALHA", str(e))

    def testar_responsividade(self):
        """Testa responsividade em diferentes tamanhos"""
        print("\nüì± TESTANDO RESPONSIVIDADE")
        print("=" * 50)
        
        tamanhos = [
            (1920, 1080, "Desktop"),
            (768, 1024, "Tablet"),
            (375, 667, "Mobile")
        ]
        
        for largura, altura, dispositivo in tamanhos:
            try:
                self.driver.set_window_size(largura, altura)
                time.sleep(2)
                
                # Verifica se a p√°gina ainda est√° funcional
                body = self.driver.find_element(By.TAG_NAME, "body")
                
                if body.is_displayed():
                    self.log_resultado(f"Responsividade {dispositivo}", "SUCESSO")
                else:
                    self.log_resultado(f"Responsividade {dispositivo}", "FALHA", 
                                     "P√°gina n√£o vis√≠vel")
                    
            except Exception as e:
                self.log_resultado(f"Responsividade {dispositivo}", "FALHA", str(e))

    def testar_performance_carregamento(self):
        """Testa performance de carregamento"""
        print("\n‚ö° TESTANDO PERFORMANCE")
        print("=" * 50)
        
        try:
            inicio = time.time()
            self.driver.get(self.base_url)
            
            # Aguarda carregamento completo
            WebDriverWait(self.driver, 30).until(
                EC.presence_of_element_located((By.TAG_NAME, "body"))
            )
            
            fim = time.time()
            tempo_carregamento = fim - inicio
            
            if tempo_carregamento < 10:
                self.log_resultado("Performance de carregamento", "SUCESSO", 
                                 f"{tempo_carregamento:.2f}s")
            elif tempo_carregamento < 20:
                self.log_resultado("Performance de carregamento", "AVISO", 
                                 f"Lento: {tempo_carregamento:.2f}s")
            else:
                self.log_resultado("Performance de carregamento", "FALHA", 
                                 f"Muito lento: {tempo_carregamento:.2f}s")
                
        except Exception as e:
            self.log_resultado("Performance de carregamento", "FALHA", str(e))

    def executar_todos_os_testes(self):
        """Executa todos os testes de frontend com Selenium"""
        print("üé≠ INICIANDO TESTES DE FRONTEND - SELENIUM")
        print("=" * 60)
        print(f"Data/Hora: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
        print("=" * 60)
        
        if not SELENIUM_DISPONIVEL:
            self.log_resultado("Selenium", "FALHA", 
                             "Selenium n√£o instalado. Execute: pip install selenium")
            self.gerar_relatorio_final()
            return
        
        # Inicia servidor
        if not self.iniciar_servidor_streamlit():
            self.log_resultado("Servidor Streamlit", "FALHA", "N√£o foi poss√≠vel iniciar")
            self.gerar_relatorio_final()
            return
        
        # Inicia WebDriver
        if not self.iniciar_webdriver():
            self.log_resultado("WebDriver", "FALHA", "N√£o foi poss√≠vel iniciar")
            self.parar_servidor()
            self.gerar_relatorio_final()
            return
        
        try:
            # Executa testes
            self.testar_performance_carregamento()
            self.testar_carregamento_pagina()
            self.testar_elementos_login()
            self.testar_interacao_login()
            self.testar_navegacao_pos_login()
            self.testar_responsividade()
            
        finally:
            # Cleanup
            if self.driver:
                self.driver.quit()
            self.parar_servidor()
        
        self.gerar_relatorio_final()

    def parar_servidor(self):
        """Para o servidor Streamlit"""
        try:
            if self.servidor_processo:
                self.servidor_processo.terminate()
                self.servidor_processo.wait(timeout=5)
            
            subprocess.run(["taskkill", "/F", "/IM", "streamlit.exe"], 
                         capture_output=True, check=False)
            print("üõë Servidor parado")
            
        except Exception as e:
            print(f"‚ö†Ô∏è  Erro ao parar servidor: {e}")

    def gerar_relatorio_final(self):
        """Gera relat√≥rio final dos testes"""
        print("\n" + "=" * 60)
        print("üìä RELAT√ìRIO FINAL DOS TESTES SELENIUM")
        print("=" * 60)
        
        print(f"Total de testes executados: {self.contador_testes}")
        print(f"‚úÖ Sucessos: {self.contador_sucessos}")
        print(f"‚ùå Falhas: {self.contador_falhas}")
        
        if self.contador_testes > 0:
            taxa_sucesso = (self.contador_sucessos / self.contador_testes) * 100
            print(f"üìà Taxa de sucesso: {taxa_sucesso:.1f}%")
        
        if self.contador_falhas > 0:
            print(f"\n‚ö†Ô∏è  TESTES QUE FALHARAM:")
            for resultado in self.resultados:
                if resultado["status"] == "FALHA":
                    print(f"   ‚Ä¢ {resultado['teste']}: {resultado['detalhes']}")
        
        # Salva relat√≥rio
        self.salvar_relatorio_arquivo()
        print(f"\nüìÑ Relat√≥rio salvo em: relatorio_testes_selenium.json")
        print("=" * 60)

    def salvar_relatorio_arquivo(self):
        """Salva relat√≥rio em arquivo JSON"""
        relatorio = {
            "data_execucao": datetime.now().isoformat(),
            "tipo_teste": "Frontend Selenium",
            "resumo": {
                "total_testes": self.contador_testes,
                "sucessos": self.contador_sucessos,
                "falhas": self.contador_falhas,
                "taxa_sucesso": (self.contador_sucessos / self.contador_testes * 100) if self.contador_testes > 0 else 0
            },
            "resultados_detalhados": self.resultados,
            "configuracao": {
                "framework": "Selenium WebDriver",
                "browser": "Chrome Headless",
                "url_base": self.base_url
            }
        }
        
        with open("relatorio_testes_selenium.json", "w", encoding="utf-8") as f:
            json.dump(relatorio, f, ensure_ascii=False, indent=2)


def main():
    """Fun√ß√£o principal"""
    testador = TestadorFrontendSelenium()
    
    try:
        testador.executar_todos_os_testes()
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è  Testes interrompidos")
        if testador.driver:
            testador.driver.quit()
        testador.parar_servidor()


if __name__ == "__main__":
    main()
