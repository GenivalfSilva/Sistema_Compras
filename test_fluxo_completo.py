#!/usr/bin/env python3
"""
Sistema de Testes Completo para Fluxo de Solicita√ß√µes
Testa todas as transi√ß√µes de status e casos edge poss√≠veis
"""

import sys
import os
import json
import hashlib
from datetime import datetime, timedelta
from typing import Dict, List, Tuple, Optional

# Adiciona o diret√≥rio do projeto ao path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# Configura√ß√µes do fluxo (baseado no app.py)
ETAPAS_PROCESSO = [
    "Solicita√ß√£o",
    "Requisi√ß√£o", 
    "Suprimentos",
    "Em Cota√ß√£o",
    "Pedido de Compras",
    "Aguardando Aprova√ß√£o",
    "Aprovado",
    "Reprovado",
    "Compra feita",
    "Aguardando Entrega",
    "Pedido Finalizado"
]

PERFIS_USUARIOS = {
    "admin": {"perfil": "Admin", "pode_tudo": True},
    "Leonardo.Fragoso": {"perfil": "Solicitante", "pode_criar": True},
    "Genival.Silva": {"perfil": "Solicitante", "pode_criar": True},
    "Estoque.Sistema": {"perfil": "Estoque", "pode_requisicao": True},
    "Fabio.Ramos": {"perfil": "Suprimentos", "pode_processar": True},
    "Diretoria": {"perfil": "Ger√™ncia&Diretoria", "pode_aprovar": True}
}

PRIORIDADES = ["Urgente", "Alta", "Normal", "Baixa"]
SLA_PADRAO = {"Urgente": 1, "Alta": 2, "Normal": 3, "Baixa": 5}

class TestadorFluxoCompleto:
    """Classe principal para testes do fluxo de solicita√ß√µes"""
    
    def __init__(self):
        self.resultados = []
        self.solicitacoes_teste = []
        self.contador_testes = 0
        self.contador_sucessos = 0
        self.contador_falhas = 0
        
    def log_resultado(self, teste: str, status: str, detalhes: str = ""):
        """Registra resultado de um teste"""
        resultado = {
            "teste": teste,
            "status": status,
            "detalhes": detalhes,
            "timestamp": datetime.now().isoformat()
        }
        self.resultados.append(resultado)
        
        if status == "SUCESSO":
            self.contador_sucessos += 1
            print(f"‚úÖ {teste}")
        elif status == "FALHA":
            self.contador_falhas += 1
            print(f"‚ùå {teste} - {detalhes}")
        else:
            print(f"‚ö†Ô∏è  {teste} - {detalhes}")
            
        self.contador_testes += 1

    def criar_solicitacao_teste(self, prioridade: str = "Normal", valor: float = 1000.0) -> Dict:
        """Cria uma solicita√ß√£o de teste com valida√ß√µes"""
        # VALIDA√á√ïES DE SEGURAN√áA
        # 1. Validar prioridade
        prioridades_validas = ["Urgente", "Alta", "Normal", "Baixa"]
        if prioridade not in prioridades_validas:
            raise ValueError(f"Prioridade inv√°lida: '{prioridade}'. Use: {', '.join(prioridades_validas)}")
        
        # 2. Validar valor negativo
        if valor < 0:
            raise ValueError(f"Valor negativo n√£o permitido: {valor}")
        
        numero = len(self.solicitacoes_teste) + 1
        solicitacao = {
            "numero_solicitacao": numero,
            "solicitante": "Leonardo.Fragoso",
            "departamento": "TI",
            "prioridade": prioridade,
            "descricao": f"Teste de solicita√ß√£o #{numero}",
            "valor_total": valor,
            "status": "Solicita√ß√£o",
            "data_solicitacao": datetime.now().isoformat(),
            "sla_dias": SLA_PADRAO.get(prioridade, 3),
            "itens": [
                {
                    "produto": "Produto Teste",
                    "quantidade": 1,
                    "unidade": "UN",
                    "valor_unitario": valor
                }
            ]
        }
        self.solicitacoes_teste.append(solicitacao)
        return solicitacao

    def testar_transicoes_validas(self):
        """Testa todas as transi√ß√µes v√°lidas entre status"""
        print("\nüîÑ TESTANDO TRANSI√á√ïES V√ÅLIDAS DE STATUS")
        print("=" * 50)
        
        # Mapeamento de transi√ß√µes v√°lidas
        transicoes_validas = {
            "Solicita√ß√£o": ["Requisi√ß√£o"],
            "Requisi√ß√£o": ["Suprimentos"],
            "Suprimentos": ["Em Cota√ß√£o"],
            "Em Cota√ß√£o": ["Pedido de Compras"],
            "Pedido de Compras": ["Aguardando Aprova√ß√£o"],
            "Aguardando Aprova√ß√£o": ["Aprovado", "Reprovado"],
            "Aprovado": ["Compra feita"],
            "Reprovado": [],  # Status final
            "Compra feita": ["Aguardando Entrega"],
            "Aguardando Entrega": ["Pedido Finalizado"],
            "Pedido Finalizado": []  # Status final
        }
        
        for status_atual, proximos_validos in transicoes_validas.items():
            for proximo_status in proximos_validos:
                teste_nome = f"Transi√ß√£o: {status_atual} ‚Üí {proximo_status}"
                
                # Simula a transi√ß√£o
                solicitacao = self.criar_solicitacao_teste()
                solicitacao["status"] = status_atual
                
                # Valida se a transi√ß√£o √© permitida
                if self.validar_transicao(status_atual, proximo_status):
                    self.log_resultado(teste_nome, "SUCESSO")
                else:
                    self.log_resultado(teste_nome, "FALHA", "Transi√ß√£o n√£o permitida")

    def testar_transicoes_invalidas(self):
        """Testa transi√ß√µes inv√°lidas que devem ser bloqueadas"""
        print("\n‚ùå TESTANDO TRANSI√á√ïES INV√ÅLIDAS (DEVEM FALHAR)")
        print("=" * 50)
        
        # Casos de transi√ß√µes inv√°lidas
        transicoes_invalidas = [
            ("Solicita√ß√£o", "Aprovado"),
            ("Requisi√ß√£o", "Pedido Finalizado"),
            ("Suprimentos", "Reprovado"),
            ("Em Cota√ß√£o", "Aguardando Entrega"),
            ("Pedido Finalizado", "Solicita√ß√£o"),
            ("Reprovado", "Aprovado"),
            ("Aprovado", "Reprovado")
        ]
        
        for status_atual, proximo_status in transicoes_invalidas:
            teste_nome = f"Transi√ß√£o Inv√°lida: {status_atual} ‚Üí {proximo_status}"
            
            if not self.validar_transicao(status_atual, proximo_status):
                self.log_resultado(teste_nome, "SUCESSO", "Corretamente bloqueada")
            else:
                self.log_resultado(teste_nome, "FALHA", "Transi√ß√£o inv√°lida foi permitida")

    def testar_permissoes_por_perfil(self):
        """Testa permiss√µes espec√≠ficas por perfil de usu√°rio"""
        print("\nüë• TESTANDO PERMISS√ïES POR PERFIL")
        print("=" * 50)
        
        # Mapeamento de a√ß√µes permitidas por perfil
        acoes_por_perfil = {
            "Solicitante": {
                "pode_criar_solicitacao": True,
                "pode_mover_para_requisicao": False,
                "pode_processar_suprimentos": False,
                "pode_aprovar": False,
                "pode_finalizar": False
            },
            "Estoque": {
                "pode_criar_solicitacao": False,
                "pode_mover_para_requisicao": True,
                "pode_processar_suprimentos": False,
                "pode_aprovar": False,
                "pode_finalizar": False
            },
            "Suprimentos": {
                "pode_criar_solicitacao": False,
                "pode_mover_para_requisicao": False,
                "pode_processar_suprimentos": True,
                "pode_aprovar": False,
                "pode_finalizar": True
            },
            "Ger√™ncia&Diretoria": {
                "pode_criar_solicitacao": False,
                "pode_mover_para_requisicao": False,
                "pode_processar_suprimentos": False,
                "pode_aprovar": True,
                "pode_finalizar": False
            },
            "Admin": {
                "pode_criar_solicitacao": True,
                "pode_mover_para_requisicao": True,
                "pode_processar_suprimentos": True,
                "pode_aprovar": True,
                "pode_finalizar": True
            }
        }
        
        for perfil, permissoes in acoes_por_perfil.items():
            for acao, permitido in permissoes.items():
                teste_nome = f"Permiss√£o {perfil}: {acao}"
                
                # Simula verifica√ß√£o de permiss√£o
                resultado = self.verificar_permissao(perfil, acao)
                
                if resultado == permitido:
                    self.log_resultado(teste_nome, "SUCESSO")
                else:
                    status_esperado = "permitido" if permitido else "negado"
                    status_atual = "permitido" if resultado else "negado"
                    self.log_resultado(teste_nome, "FALHA", 
                                     f"Esperado: {status_esperado}, Atual: {status_atual}")

    def testar_regras_sla(self):
        """Testa c√°lculos e valida√ß√µes de SLA"""
        print("\n‚è∞ TESTANDO REGRAS DE SLA")
        print("=" * 50)
        
        for prioridade in PRIORIDADES:
            sla_esperado = SLA_PADRAO[prioridade]
            
            # Teste 1: SLA dentro do prazo
            solicitacao = self.criar_solicitacao_teste(prioridade)
            solicitacao["data_solicitacao"] = datetime.now().isoformat()
            
            dias_decorridos = 0
            sla_cumprido = dias_decorridos <= sla_esperado
            
            teste_nome = f"SLA {prioridade} - Dentro do prazo ({dias_decorridos}/{sla_esperado} dias)"
            if sla_cumprido:
                self.log_resultado(teste_nome, "SUCESSO")
            else:
                self.log_resultado(teste_nome, "FALHA", "SLA n√£o cumprido")
            
            # Teste 2: SLA estourado
            solicitacao_atrasada = self.criar_solicitacao_teste(prioridade)
            data_antiga = datetime.now() - timedelta(days=sla_esperado + 1)
            solicitacao_atrasada["data_solicitacao"] = data_antiga.isoformat()
            
            dias_decorridos = sla_esperado + 1
            sla_cumprido = dias_decorridos <= sla_esperado
            
            teste_nome = f"SLA {prioridade} - Estourado ({dias_decorridos}/{sla_esperado} dias)"
            if not sla_cumprido:
                self.log_resultado(teste_nome, "SUCESSO", "Corretamente identificado como atrasado")
            else:
                self.log_resultado(teste_nome, "FALHA", "SLA estourado n√£o foi detectado")

    def testar_valores_limites(self):
        """Testa regras de valores e limites de aprova√ß√£o"""
        print("\nüí∞ TESTANDO VALORES E LIMITES")
        print("=" * 50)
        
        # Limites baseados nas configura√ß√µes
        limite_gerencia = 5000.0
        limite_diretoria = 15000.0
        
        casos_teste = [
            (500.0, "Valor baixo", "gerencia"),
            (4999.0, "Limite ger√™ncia", "gerencia"),
            (5000.0, "Exato limite ger√™ncia", "gerencia"),
            (5001.0, "Acima limite ger√™ncia", "diretoria"),
            (14999.0, "Limite diretoria", "diretoria"),
            (15000.0, "Exato limite diretoria", "diretoria"),
            (15001.0, "Acima limite diretoria", "especial")
        ]
        
        for valor, descricao, aprovador_esperado in casos_teste:
            solicitacao = self.criar_solicitacao_teste(valor=valor)
            aprovador_calculado = self.calcular_aprovador_necessario(valor, limite_gerencia, limite_diretoria)
            
            teste_nome = f"Valor {valor} ({descricao}) - Aprovador: {aprovador_esperado}"
            
            if aprovador_calculado == aprovador_esperado:
                self.log_resultado(teste_nome, "SUCESSO")
            else:
                self.log_resultado(teste_nome, "FALHA", 
                                 f"Esperado: {aprovador_esperado}, Calculado: {aprovador_calculado}")

    def testar_casos_edge(self):
        """Testa casos extremos e situa√ß√µes especiais"""
        print("\nüîç TESTANDO CASOS EDGE")
        print("=" * 50)
        
        # Caso 1: Solicita√ß√£o com valor zero
        solicitacao_zero = self.criar_solicitacao_teste(valor=0.0)
        teste_nome = "Solicita√ß√£o com valor zero"
        if solicitacao_zero["valor_total"] == 0.0:
            self.log_resultado(teste_nome, "SUCESSO", "Valor zero aceito")
        else:
            self.log_resultado(teste_nome, "FALHA", "Valor zero n√£o tratado corretamente")
        
        # Caso 2: Solicita√ß√£o com valor negativo
        try:
            solicitacao_negativa = self.criar_solicitacao_teste(valor=-100.0)
            teste_nome = "Solicita√ß√£o com valor negativo"
            self.log_resultado(teste_nome, "FALHA", "Valor negativo foi aceito")
        except Exception:
            teste_nome = "Solicita√ß√£o com valor negativo"
            self.log_resultado(teste_nome, "SUCESSO", "Valor negativo corretamente rejeitado")
        
        # Caso 3: Prioridade inv√°lida
        try:
            solicitacao_prioridade_invalida = self.criar_solicitacao_teste(prioridade="Inexistente")
            teste_nome = "Prioridade inv√°lida"
            self.log_resultado(teste_nome, "FALHA", "Prioridade inv√°lida foi aceita")
        except Exception:
            teste_nome = "Prioridade inv√°lida"
            self.log_resultado(teste_nome, "SUCESSO", "Prioridade inv√°lida corretamente rejeitada")
        
        # Caso 4: M√∫ltiplas transi√ß√µes simult√¢neas
        solicitacao = self.criar_solicitacao_teste()
        teste_nome = "M√∫ltiplas transi√ß√µes simult√¢neas"
        
        # Simula tentativa de m√∫ltiplas mudan√ßas de status
        status_original = solicitacao["status"]
        try:
            solicitacao["status"] = "Aprovado"  # Pula v√°rias etapas
            if not self.validar_transicao(status_original, "Aprovado"):
                self.log_resultado(teste_nome, "SUCESSO", "M√∫ltiplas transi√ß√µes bloqueadas")
            else:
                self.log_resultado(teste_nome, "FALHA", "M√∫ltiplas transi√ß√µes permitidas")
        except Exception:
            self.log_resultado(teste_nome, "SUCESSO", "M√∫ltiplas transi√ß√µes corretamente bloqueadas")

    def testar_fluxo_completo_cenarios(self):
        """Testa cen√°rios completos do fluxo"""
        print("\nüéØ TESTANDO CEN√ÅRIOS COMPLETOS")
        print("=" * 50)
        
        # Cen√°rio 1: Fluxo normal aprovado
        self.testar_cenario_fluxo_normal_aprovado()
        
        # Cen√°rio 2: Fluxo reprovado
        self.testar_cenario_fluxo_reprovado()
        
        # Cen√°rio 3: Fluxo com valor alto
        self.testar_cenario_valor_alto()

    def testar_cenario_fluxo_normal_aprovado(self):
        """Testa fluxo completo normal que √© aprovado"""
        cenario = "Fluxo Normal Aprovado"
        solicitacao = self.criar_solicitacao_teste(prioridade="Normal", valor=2000.0)
        
        etapas_esperadas = [
            "Solicita√ß√£o",
            "Requisi√ß√£o", 
            "Suprimentos",
            "Em Cota√ß√£o",
            "Pedido de Compras",
            "Aguardando Aprova√ß√£o",
            "Aprovado",
            "Compra feita",
            "Aguardando Entrega",
            "Pedido Finalizado"
        ]
        
        status_atual = "Solicita√ß√£o"
        sucesso = True
        
        for i in range(len(etapas_esperadas) - 1):
            proximo_status = etapas_esperadas[i + 1]
            
            if self.validar_transicao(status_atual, proximo_status):
                status_atual = proximo_status
            else:
                sucesso = False
                break
        
        if sucesso and status_atual == "Pedido Finalizado":
            self.log_resultado(f"{cenario} - Completo", "SUCESSO")
        else:
            self.log_resultado(f"{cenario} - Completo", "FALHA", f"Parou em: {status_atual}")

    def testar_cenario_fluxo_reprovado(self):
        """Testa fluxo que √© reprovado"""
        cenario = "Fluxo Reprovado"
        solicitacao = self.criar_solicitacao_teste(prioridade="Alta", valor=8000.0)
        
        etapas_ate_reprovacao = [
            "Solicita√ß√£o",
            "Requisi√ß√£o",
            "Suprimentos", 
            "Em Cota√ß√£o",
            "Pedido de Compras",
            "Aguardando Aprova√ß√£o",
            "Reprovado"
        ]
        
        status_atual = "Solicita√ß√£o"
        sucesso = True
        
        for i in range(len(etapas_ate_reprovacao) - 1):
            proximo_status = etapas_ate_reprovacao[i + 1]
            
            if self.validar_transicao(status_atual, proximo_status):
                status_atual = proximo_status
            else:
                sucesso = False
                break
        
        if sucesso and status_atual == "Reprovado":
            self.log_resultado(f"{cenario} - Completo", "SUCESSO")
            
            # Testa se n√£o pode sair do status Reprovado
            if not self.validar_transicao("Reprovado", "Aprovado"):
                self.log_resultado(f"{cenario} - Status final", "SUCESSO", "Reprovado √© status final")
            else:
                self.log_resultado(f"{cenario} - Status final", "FALHA", "Reprovado permite transi√ß√µes")
        else:
            self.log_resultado(f"{cenario} - Completo", "FALHA", f"Parou em: {status_atual}")

    def testar_cenario_valor_alto(self):
        """Testa fluxo com valor alto que requer aprova√ß√£o especial"""
        cenario = "Valor Alto (>15k)"
        solicitacao = self.criar_solicitacao_teste(prioridade="Urgente", valor=20000.0)
        
        aprovador = self.calcular_aprovador_necessario(20000.0, 5000.0, 15000.0)
        
        if aprovador == "especial":
            self.log_resultado(f"{cenario} - Aprovador", "SUCESSO", "Requer aprova√ß√£o especial")
        else:
            self.log_resultado(f"{cenario} - Aprovador", "FALHA", f"Aprovador: {aprovador}")

    # M√©todos auxiliares para simula√ß√£o
    def validar_transicao(self, status_atual: str, proximo_status: str) -> bool:
        """Simula valida√ß√£o de transi√ß√£o entre status"""
        transicoes_validas = {
            "Solicita√ß√£o": ["Requisi√ß√£o"],
            "Requisi√ß√£o": ["Suprimentos"],
            "Suprimentos": ["Em Cota√ß√£o"],
            "Em Cota√ß√£o": ["Pedido de Compras"],
            "Pedido de Compras": ["Aguardando Aprova√ß√£o"],
            "Aguardando Aprova√ß√£o": ["Aprovado", "Reprovado"],
            "Aprovado": ["Compra feita"],
            "Reprovado": [],
            "Compra feita": ["Aguardando Entrega"],
            "Aguardando Entrega": ["Pedido Finalizado"],
            "Pedido Finalizado": []
        }
        
        return proximo_status in transicoes_validas.get(status_atual, [])

    def verificar_permissao(self, perfil: str, acao: str) -> bool:
        """Simula verifica√ß√£o de permiss√£o"""
        if perfil == "Admin":
            return True
            
        permissoes = {
            "Solicitante": ["pode_criar_solicitacao"],
            "Estoque": ["pode_mover_para_requisicao"],
            "Suprimentos": ["pode_processar_suprimentos", "pode_finalizar"],
            "Ger√™ncia&Diretoria": ["pode_aprovar"]
        }
        
        return acao in permissoes.get(perfil, [])

    def calcular_aprovador_necessario(self, valor: float, limite_gerencia: float, limite_diretoria: float) -> str:
        """Simula c√°lculo do aprovador necess√°rio baseado no valor"""
        if valor <= limite_gerencia:
            return "gerencia"
        elif valor <= limite_diretoria:
            return "diretoria"
        else:
            return "especial"

    def executar_todos_os_testes(self):
        """Executa todos os testes dispon√≠veis"""
        print("üß™ INICIANDO TESTES COMPLETOS DO FLUXO DE SOLICITA√á√ïES")
        print("=" * 60)
        print(f"Data/Hora: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
        print("=" * 60)
        
        # Executa todos os grupos de teste
        self.testar_transicoes_validas()
        self.testar_transicoes_invalidas()
        self.testar_permissoes_por_perfil()
        self.testar_regras_sla()
        self.testar_valores_limites()
        self.testar_casos_edge()
        self.testar_fluxo_completo_cenarios()
        
        # Relat√≥rio final
        self.gerar_relatorio_final()

    def gerar_relatorio_final(self):
        """Gera relat√≥rio final dos testes"""
        print("\n" + "=" * 60)
        print("üìä RELAT√ìRIO FINAL DOS TESTES")
        print("=" * 60)
        
        print(f"Total de testes executados: {self.contador_testes}")
        print(f"‚úÖ Sucessos: {self.contador_sucessos}")
        print(f"‚ùå Falhas: {self.contador_falhas}")
        
        if self.contador_testes > 0:
            taxa_sucesso = (self.contador_sucessos / self.contador_testes) * 100
            print(f"üìà Taxa de sucesso: {taxa_sucesso:.1f}%")
        
        if self.contador_falhas > 0:
            print(f"\n‚ö†Ô∏è  TESTES QUE FALHARAM:")
            for resultado in self.resultados:
                if resultado["status"] == "FALHA":
                    print(f"   ‚Ä¢ {resultado['teste']}: {resultado['detalhes']}")
        
        # Salva relat√≥rio em arquivo
        self.salvar_relatorio_arquivo()
        
        print(f"\nüìÑ Relat√≥rio detalhado salvo em: relatorio_testes_fluxo.json")
        print("=" * 60)

    def salvar_relatorio_arquivo(self):
        """Salva relat√≥rio detalhado em arquivo JSON"""
        relatorio = {
            "data_execucao": datetime.now().isoformat(),
            "resumo": {
                "total_testes": self.contador_testes,
                "sucessos": self.contador_sucessos,
                "falhas": self.contador_falhas,
                "taxa_sucesso": (self.contador_sucessos / self.contador_testes * 100) if self.contador_testes > 0 else 0
            },
            "resultados_detalhados": self.resultados,
            "configuracao_testada": {
                "etapas_processo": ETAPAS_PROCESSO,
                "perfis_usuarios": PERFIS_USUARIOS,
                "prioridades": PRIORIDADES,
                "sla_padrao": SLA_PADRAO
            }
        }
        
        with open("relatorio_testes_fluxo.json", "w", encoding="utf-8") as f:
            json.dump(relatorio, f, ensure_ascii=False, indent=2)


def main():
    """Fun√ß√£o principal"""
    testador = TestadorFluxoCompleto()
    testador.executar_todos_os_testes()


if __name__ == "__main__":
    main()
