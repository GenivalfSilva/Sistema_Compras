#!/usr/bin/env python3
"""
Script para migrar dados do arquivo JSON para o banco de dados Neon
"""

import json
import os
import sys
from datetime import datetime
from database import get_database

def migrate_json_to_database():
    """Migra dados do JSON para o banco de dados"""
    
    json_file = "compras_sla_data.json"
    
    if not os.path.exists(json_file):
        print(f"‚ùå Arquivo {json_file} n√£o encontrado.")
        return False
    
    print("üîÑ Iniciando migra√ß√£o do JSON para o banco de dados...")
    
    try:
        # Carrega dados do JSON
        with open(json_file, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        print(f"üìÑ Dados carregados do JSON: {len(data.get('solicitacoes', []))} solicita√ß√µes")
        
        # Conecta ao banco
        db = get_database(use_cloud_db=True)  # For√ßa uso do banco cloud (Neon)
        
        if not db.db_available:
            print("‚ùå Banco de dados n√£o dispon√≠vel. Verifique as configura√ß√µes.")
            return False
        
        print("‚úÖ Conectado ao banco de dados Neon")
        
        # Migra usu√°rios
        usuarios_migrados = 0
        for usuario in data.get('usuarios', []):
            success = db.add_user(
                usuario['username'],
                usuario['nome'],
                usuario['perfil'],
                usuario['departamento'],
                usuario['senha_hash'],
                is_hashed=True
            )
            if success:
                usuarios_migrados += 1
        
        print(f"üë• Usu√°rios migrados: {usuarios_migrados}")
        
        # Migra solicita√ß√µes
        solicitacoes_migradas = 0
        for solicitacao in data.get('solicitacoes', []):
            success = db.add_solicitacao(solicitacao)
            if success:
                solicitacoes_migradas += 1
            else:
                print(f"‚ö†Ô∏è  Falha ao migrar solicita√ß√£o #{solicitacao.get('numero_solicitacao_estoque')}")
        
        print(f"üìã Solicita√ß√µes migradas: {solicitacoes_migradas}")
        
        # Migra configura√ß√µes
        config_migradas = 0
        configuracoes = data.get('configuracoes', {})
        for key, value in configuracoes.items():
            if key != 'catalogo_produtos':  # Cat√°logo tem tratamento especial
                db.set_config(key, json.dumps(value) if isinstance(value, (dict, list)) else str(value))
                config_migradas += 1
        
        print(f"‚öôÔ∏è  Configura√ß√µes migradas: {config_migradas}")
        
        # Migra cat√°logo de produtos
        produtos_migrados = 0
        catalogo = configuracoes.get('catalogo_produtos', [])
        if catalogo:
            success = db.update_catalogo_produtos(catalogo)
            if success:
                produtos_migrados = len(catalogo)
        
        print(f"üì¶ Produtos do cat√°logo migrados: {produtos_migrados}")
        
        # Migra notifica√ß√µes
        notif_migradas = 0
        for notif in data.get('notificacoes', []):
            success = db.add_notificacao(
                notif['perfil'],
                notif['numero'],
                notif['mensagem']
            )
            if success:
                notif_migradas += 1
        
        print(f"üîî Notifica√ß√µes migradas: {notif_migradas}")
        
        print("\n‚úÖ Migra√ß√£o conclu√≠da com sucesso!")
        print(f"üìä Resumo:")
        print(f"   - {usuarios_migrados} usu√°rios")
        print(f"   - {solicitacoes_migradas} solicita√ß√µes")
        print(f"   - {config_migradas} configura√ß√µes")
        print(f"   - {produtos_migrados} produtos")
        print(f"   - {notif_migradas} notifica√ß√µes")
        
        # Cria backup do JSON
        backup_name = f"compras_sla_data_backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        os.rename(json_file, backup_name)
        print(f"üíæ Backup criado: {backup_name}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro durante a migra√ß√£o: {e}")
        return False

def test_database_connection():
    """Testa a conex√£o com o banco de dados"""
    print("üîç Testando conex√£o com o banco de dados...")
    
    try:
        db = get_database(use_cloud_db=True)
        
        if not db.db_available:
            print("‚ùå Banco de dados n√£o dispon√≠vel")
            return False
        
        print(f"‚úÖ Conectado ao banco: {db.db_type}")
        
        # Testa opera√ß√µes b√°sicas
        usuarios = db.get_all_users()
        print(f"üë• Usu√°rios no banco: {len(usuarios)}")
        
        solicitacoes = db.get_all_solicitacoes()
        print(f"üìã Solicita√ß√µes no banco: {len(solicitacoes)}")
        
        catalogo = db.get_catalogo_produtos()
        print(f"üì¶ Produtos no cat√°logo: {len(catalogo)}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao testar banco: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ Script de Migra√ß√£o - Sistema de Compras")
    print("=" * 50)
    
    if len(sys.argv) > 1 and sys.argv[1] == "--test":
        # Apenas testa a conex√£o
        test_database_connection()
    else:
        # Executa migra√ß√£o completa
        if test_database_connection():
            print("\n" + "=" * 50)
            migrate_json_to_database()
        else:
            print("‚ùå Falha no teste de conex√£o. Migra√ß√£o cancelada.")
