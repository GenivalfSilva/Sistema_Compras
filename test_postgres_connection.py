#!/usr/bin/env python3
"""
Diagn√≥stico de conex√£o PostgreSQL - Windows
"""

import psycopg2
import subprocess
import sys
import os

def test_postgres_service():
    """Testa se o servi√ßo PostgreSQL est√° rodando"""
    print("üîç VERIFICANDO SERVI√áO POSTGRESQL")
    print("=" * 40)
    
    try:
        # Tenta encontrar servi√ßos PostgreSQL
        result = subprocess.run(['sc', 'query', 'postgresql'], 
                              capture_output=True, text=True, shell=True)
        if result.returncode == 0:
            print("‚úÖ Servi√ßo PostgreSQL encontrado")
            print(result.stdout)
        else:
            print("‚ùå Servi√ßo PostgreSQL n√£o encontrado")
            
        # Tenta vers√µes alternativas
        for service_name in ['postgresql-x64-16', 'postgresql-x64-15', 'postgresql-x64-14']:
            result = subprocess.run(['sc', 'query', service_name], 
                                  capture_output=True, text=True, shell=True)
            if result.returncode == 0:
                print(f"‚úÖ Servi√ßo {service_name} encontrado")
                print(result.stdout)
                return True
                
    except Exception as e:
        print(f"‚ùå Erro ao verificar servi√ßos: {e}")
    
    return False

def test_psql_command():
    """Testa se psql est√° no PATH"""
    print("\nüîç VERIFICANDO COMANDO PSQL")
    print("=" * 30)
    
    try:
        result = subprocess.run(['psql', '--version'], 
                              capture_output=True, text=True, shell=True)
        if result.returncode == 0:
            print("‚úÖ psql encontrado:", result.stdout.strip())
            return True
        else:
            print("‚ùå psql n√£o encontrado no PATH")
            return False
    except Exception as e:
        print(f"‚ùå Erro ao testar psql: {e}")
        return False

def test_connection_variations():
    """Testa diferentes varia√ß√µes de conex√£o"""
    print("\nüîç TESTANDO CONEX√ïES")
    print("=" * 25)
    
    # Diferentes combina√ß√µes de credenciais
    test_configs = [
        {"host": "localhost", "port": 5432, "user": "postgres", "password": "postgres123", "database": "postgres"},
        {"host": "localhost", "port": 5432, "user": "postgres", "password": "postgres", "database": "postgres"},
        {"host": "127.0.0.1", "port": 5432, "user": "postgres", "password": "postgres123", "database": "postgres"},
        {"host": "localhost", "port": 5433, "user": "postgres", "password": "postgres123", "database": "postgres"},
    ]
    
    for i, config in enumerate(test_configs, 1):
        print(f"\nüß™ Teste {i}: {config['user']}@{config['host']}:{config['port']}")
        try:
            conn = psycopg2.connect(**config)
            cursor = conn.cursor()
            cursor.execute("SELECT version()")
            version = cursor.fetchone()[0]
            print(f"‚úÖ SUCESSO! PostgreSQL: {version[:50]}...")
            conn.close()
            return config
        except psycopg2.OperationalError as e:
            print(f"‚ùå Falha: {e}")
        except Exception as e:
            print(f"‚ùå Erro: {e}")
    
    return None

def check_postgres_installation():
    """Verifica instala√ß√£o do PostgreSQL"""
    print("\nüîç VERIFICANDO INSTALA√á√ÉO")
    print("=" * 30)
    
    # Locais comuns de instala√ß√£o
    common_paths = [
        r"C:\Program Files\PostgreSQL",
        r"C:\Program Files (x86)\PostgreSQL",
        r"C:\PostgreSQL",
    ]
    
    for path in common_paths:
        if os.path.exists(path):
            print(f"‚úÖ PostgreSQL encontrado em: {path}")
            # Lista vers√µes
            try:
                versions = os.listdir(path)
                print(f"   Vers√µes: {', '.join(versions)}")
                return True
            except:
                pass
        else:
            print(f"‚ùå N√£o encontrado em: {path}")
    
    return False

def main():
    print("üîß DIAGN√ìSTICO POSTGRESQL - WINDOWS")
    print("=" * 50)
    
    # 1. Verificar instala√ß√£o
    installation_found = check_postgres_installation()
    
    # 2. Verificar servi√ßos
    service_running = test_postgres_service()
    
    # 3. Verificar psql
    psql_available = test_psql_command()
    
    # 4. Testar conex√µes
    working_config = test_connection_variations()
    
    print("\n" + "=" * 50)
    print("üìã RESUMO DO DIAGN√ìSTICO")
    print("=" * 50)
    print(f"PostgreSQL instalado: {'‚úÖ' if installation_found else '‚ùå'}")
    print(f"Servi√ßo rodando: {'‚úÖ' if service_running else '‚ùå'}")
    print(f"psql dispon√≠vel: {'‚úÖ' if psql_available else '‚ùå'}")
    print(f"Conex√£o funciona: {'‚úÖ' if working_config else '‚ùå'}")
    
    if working_config:
        print(f"\nüéâ CONFIGURA√á√ÉO QUE FUNCIONA:")
        print(f"   Host: {working_config['host']}")
        print(f"   Porta: {working_config['port']}")
        print(f"   Usu√°rio: {working_config['user']}")
        print(f"   Senha: {working_config['password']}")
        
        # Criar arquivo de configura√ß√£o
        config_content = f"""[postgres]
host = "{working_config['host']}"
port = {working_config['port']}
username = "{working_config['user']}"
password = "{working_config['password']}"
database = "sistema_compras"
"""
        
        with open('secrets_local.toml', 'w') as f:
            f.write(config_content)
        print(f"\n‚úÖ Arquivo secrets_local.toml criado!")
        
    else:
        print(f"\n‚ùå NENHUMA CONEX√ÉO FUNCIONOU")
        print(f"\nüîß SOLU√á√ïES POSS√çVEIS:")
        print(f"   1. Verificar se PostgreSQL est√° instalado")
        print(f"   2. Iniciar o servi√ßo PostgreSQL")
        print(f"   3. Verificar credenciais (usu√°rio/senha)")
        print(f"   4. Verificar porta (5432 ou 5433)")
        print(f"   5. Verificar se pg_hba.conf permite conex√µes locais")

if __name__ == "__main__":
    main()
