"""
Sistema de Auditoria para A√ß√µes do Admin
Registra todas as a√ß√µes administrativas para controle e rastreabilidade
"""

import streamlit as st
from database_local import get_local_database
from datetime import datetime
import json

class AdminAuditLogger:
    """Classe para logging de a√ß√µes do Admin"""
    
    def __init__(self):
        self.db = get_local_database()
    
    def log_action(self, acao: str, modulo: str, detalhes: dict = None, solicitacao_id: int = None):
        """
        Registra uma a√ß√£o do Admin
        
        Args:
            acao: Tipo de a√ß√£o (ex: "CRIAR_SOLICITACAO", "APROVAR_PEDIDO", "MOVER_ETAPA")
            modulo: M√≥dulo onde a a√ß√£o ocorreu (ex: "SOLICITACOES", "APROVACOES", "USUARIOS")
            detalhes: Detalhes adicionais da a√ß√£o
            solicitacao_id: ID da solicita√ß√£o afetada (se aplic√°vel)
        """
        try:
            # Pega informa√ß√µes do usu√°rio da sess√£o
            usuario = st.session_state.get('username', 'admin')
            
            # Converte detalhes para JSON se fornecido
            detalhes_json = json.dumps(detalhes, ensure_ascii=False) if detalhes else None
            
            # Pega IP do usu√°rio (simulado - Streamlit n√£o exp√µe IP real)
            ip_address = st.session_state.get('client_ip', 'localhost')
            
            # Registra no banco
            success = self.db.log_admin_action(
                usuario=usuario,
                acao=acao,
                modulo=modulo,
                detalhes=detalhes_json,
                solicitacao_id=solicitacao_id,
                ip_address=ip_address
            )
            
            if success:
                # Mostra alerta discreto na interface
                st.toast(f"üîç A√ß√£o registrada: {acao}", icon="üìù")
            
            return success
            
        except Exception as e:
            st.error(f"‚ùå Erro ao registrar auditoria: {e}")
            return False
    
    def get_logs(self, limit: int = 50):
        """Recupera logs de auditoria"""
        return self.db.get_admin_audit_logs(limit=limit)

# Inst√¢ncia global do logger
audit_logger = AdminAuditLogger()

def log_admin_action(acao: str, modulo: str, detalhes: dict = None, solicitacao_id: int = None):
    """
    Fun√ß√£o utilit√°ria para logging r√°pido
    
    Exemplos de uso:
    - log_admin_action("CRIAR_SOLICITACAO", "SOLICITACOES", {"descricao": "Material de escrit√≥rio"})
    - log_admin_action("APROVAR_PEDIDO", "APROVACOES", {"valor": 1500.00}, solicitacao_id=123)
    - log_admin_action("MOVER_ETAPA", "SUPRIMENTOS", {"de": "Cota√ß√£o", "para": "Pedido"}, solicitacao_id=456)
    """
    return audit_logger.log_action(acao, modulo, detalhes, solicitacao_id)

def show_admin_warning():
    """Mostra aviso de auditoria para Admin"""
    if st.session_state.get('perfil') == 'Admin':
        st.info("üîç **Modo Admin Ativo** - Todas as suas a√ß√µes est√£o sendo registradas para auditoria.")
